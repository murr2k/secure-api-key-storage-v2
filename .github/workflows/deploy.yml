name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Bandit security linter
        uses: gaurav-nelson/bandit-action@v1
        with:
          path: "secure-api-key-storage/src"

  # Code quality checks
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Setup Node.js
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: secure-api-key-storage/dashboard/frontend/package-lock.json

      - name: Install Python dependencies
        if: matrix.component == 'backend'
        run: |
          pip install --upgrade pip
          pip install -r secure-api-key-storage/requirements.txt
          pip install black flake8 pytest pytest-cov

      - name: Lint Python code
        if: matrix.component == 'backend'
        run: |
          black --check secure-api-key-storage/src
          flake8 secure-api-key-storage/src --max-line-length=100

      - name: Run Python tests
        if: matrix.component == 'backend'
        run: |
          cd secure-api-key-storage
          pytest tests/ -v --cov=src --cov-report=xml

      - name: Install Node dependencies
        if: matrix.component == 'frontend'
        run: |
          cd secure-api-key-storage/dashboard/frontend
          npm ci

      - name: Lint frontend code
        if: matrix.component == 'frontend'
        run: |
          cd secure-api-key-storage/dashboard/frontend
          npm run lint

      - name: Run frontend tests
        if: matrix.component == 'frontend'
        run: |
          cd secure-api-key-storage/dashboard/frontend
          npm test -- --passWithNoTests

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: matrix.component == 'backend'
        with:
          files: ./secure-api-key-storage/coverage.xml
          flags: backend

  # Build Docker images
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [security-scan, lint-and-test]
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{date 'YYYYMMDD-HHmmss'}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.secure-api-storage.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/secure-api-storage
            docker-compose pull
            docker-compose up -d --remove-orphans
            docker system prune -f

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: production
      url: https://secure-api-storage.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          environment-url: https://secure-api-storage.example.com

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/secure-api-storage
            # Backup current data
            docker exec secure-key-storage tar -czf /backups/pre-deploy-$(date +%Y%m%d-%H%M%S).tar.gz /data
            # Pull and deploy new version
            docker-compose pull
            docker-compose up -d --remove-orphans
            # Health check
            sleep 30
            curl -f http://localhost:8000/health || exit 1
            # Cleanup
            docker system prune -f

      - name: Update deployment status
        if: always()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: ${{ job.status }}
          environment-url: https://secure-api-storage.example.com

  # Post-deployment validation
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Run smoke tests
        run: |
          # Test API health
          curl -f https://secure-api-storage.example.com/health
          # Test frontend
          curl -f https://secure-api-storage.example.com
          # Test API docs
          curl -f https://secure-api-storage.example.com/docs

      - name: Run integration tests
        run: |
          # Add integration test commands here
          echo "Running integration tests..."

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Scheduled security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'secure-api-key-storage-v2'
          path: '.'
          format: 'HTML'

      - name: Upload dependency check results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/