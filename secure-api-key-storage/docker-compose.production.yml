version: '3.8'

services:
  # Main application container
  secure-key-storage:
    image: ghcr.io/murr2k/secure-api-key-storage:latest
    container_name: secure-key-storage
    restart: always
    environment:
      - NODE_ENV=production
      - DOMAIN=${DOMAIN}
      - MASTER_PASSWORD=${MASTER_PASSWORD}
      - API_KEY_MASTER=${API_KEY_MASTER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - DATABASE_URL=postgresql://keymanager:${DB_PASSWORD}@postgres:5432/secure_keys
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - FRONTEND_URL=${FRONTEND_URL}
      - API_URL=${API_URL}
      - CORS_ORIGINS=${CORS_ORIGINS}
    volumes:
      - ./keys:/app/keys
      - ./backups:/app/backups
      - ./logs:/app/logs
      - ./config:/app/config
    expose:
      - "3000"
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - secure-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: secure-key-postgres
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - secure-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: secure-key-redis
    restart: always
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfilename "appendonly.aof"
    volumes:
      - redis-data:/data
    networks:
      - secure-network
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: secure-key-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./nginx/cache:/var/cache/nginx
    depends_on:
      secure-key-storage:
        condition: service_healthy
    networks:
      - secure-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Automated backup service
  backup:
    image: alpine:latest
    container_name: secure-key-backup
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 3 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts:ro
    command: >
      sh -c "
      apk add --no-cache postgresql-client tar &&
      echo '${BACKUP_SCHEDULE} /scripts/backup.sh' | crontab - &&
      crond -f -l 2
      "
    networks:
      - secure-network

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: secure-key-prometheus
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    expose:
      - "9090"
    networks:
      - secure-network

  # Grafana dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: secure-key-grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_ROOT_URL=https://${DOMAIN}/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    expose:
      - "3000"
    networks:
      - secure-network

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  secure-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16