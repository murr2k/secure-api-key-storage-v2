version: '3.8'

services:
  # Main application container
  secure-key-storage:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: secure-key-storage
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8000:8000"
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - API_URL=http://localhost:8000
      - FRONTEND_URL=http://localhost:3000
      - DATABASE_URL=postgresql://keymanager:${DB_PASSWORD}@postgres:5432/secure_keys
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - MASTER_PASSWORD=${MASTER_PASSWORD}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - LOG_LEVEL=info
      - TZ=UTC
    volumes:
      - ./data:/data
      - ./logs:/logs
      - ./config:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - secure-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: secure-key-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=keymanager
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=secure_keys
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - secure-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keymanager -d secure_keys"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: secure-key-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfilename "appendonly.aof"
    volumes:
      - redis-data:/data
    networks:
      - secure-network
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5


  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: secure-key-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./docker/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - secure-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: secure-key-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - secure-network

  # Backup service
  backup:
    image: alpine:latest
    container_name: secure-key-backup
    restart: unless-stopped
    command: |
      sh -c 'while true; do
        echo "Running backup at $$(date)"
        tar -czf /backups/backup-$$(date +%Y%m%d-%H%M%S).tar.gz /data
        find /backups -name "backup-*.tar.gz" -mtime +7 -delete
        sleep 86400
      done'
    volumes:
      - ./data:/data:ro
      - ./backups:/backups
    networks:
      - secure-network

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  secure-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16